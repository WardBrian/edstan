% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/wrapper_rasch.R
\name{rasch_stan}
\alias{rasch_stan}
\title{Estimate the Rasch model using Stan}
\usage{
rasch_stan(response_matrix = NULL, id = NULL, item = NULL,
  response = NULL, ...)
}
\arguments{
\item{response_matrix}{A response matrix. Columns represent items, and rows
represent persons. Each element indicates a correct response by one or
zero, and NA may be supplied for missing responses.}

\item{id}{A vector identifying persons. Required if \code{response_matrix} is
not supplied.}

\item{item}{A vector identifying persons. Required if \code{response_matrix}
is not supplied.}

\item{response}{A vector coded as 1 for a correct response and 0 otherwise.
Required if \code{response_matrix} is not supplied.}

\item{...}{Additional options passed to \code{\link[rstan]{sampling}}. The
usual choices are \code{iter} for the number of iterations and
\code{chains} for the number of chains.}
}
\value{
A \code{\link{rasch_stanfit}} Reference Class object.
}
\description{
Estimate the Rasch model using Stan
}
\examples{
# If the data are in a response matrix ("wide-form"):
myfit1 <- rasch_stan(response_matrix = spelling[, 2:5], chains = 4,
                     iter = 200)
myfit1$show()

# Make the spelling data long-form for next example
require(reshape2)
wide <- spelling[, 2:5]
wide$id <- 1:nrow(wide)
long <- melt(wide, id.vars = "id", variable.name = "item",
             value.name = "response")

# If the data are in "long-form":
myfit2 <- rasch_stan(id = long$id, item = long$item,
                     response = long$response, chains = 4, iter = 200)
myfit2$show()
}
\seealso{
See \code{\link[rstan]{sampling}} for additional options. See
  \code{\link{rasch_stanfit}} and \code{\link{common_stanfit}} for applicable
  Reference Class methods.
}

